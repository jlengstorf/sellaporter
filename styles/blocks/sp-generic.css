/*
 * This module is a little evil. It breaks BEM standards by allowing nested
 * rules, and by targeting elements and not classes.
 *
 * This is done because WordPress doesn't apply classes to markup without a
 * metric fuckton of wankery, and it's really just not worth the hassle.
 *
 * HOWEVER: be warned that trying to nest other blocks inside a generic block
 * can (and probably will) have side effects.
 */
.sp-generic {
  @mixin section-padding;

  /* Oh shit, look how clever this is! */
  &+&:not(&--left) {
    @mixin background-solid-color color( $color-brand tint(95%) );
  }

  &__content {
    max-width: $media-screen-large;
    margin-left: auto;
    margin-right: auto;
  }

  &--center &__content {
    max-width: $media-screen-small;
    margin-left: auto;
    margin-right: auto;
    /*padding: calc( $bh * 2 ) $bh;*/

    /*@media (min-width: $media-screen-small) {
      padding: calc( $bh * 4 );
    }*/

    @media (min-width: $media-screen-large) {
      padding-left: 0;
      padding-right: 0;
    }
  }

  &--right,&--left {
    max-width: $media-screen-large;
    margin-left: auto;
    margin-right: auto;
    background-repeat: no-repeat;
    background-size: 0;
  }

  /*
   * A little counterintuitive; the left modifier aligns images to the right
   * because the _content_ is left-aligned. Same with the right modifier below.
   */
  &--left {

    @media (min-width: $media-screen-small) {

      /*
       * This is set based on the image used during design. If it changes, this
       * will probably need to be adjusted.
       */
      min-height: 53vw;
      background-size: 43% auto;
      background-position: right bottom;
      padding-right: 42%;
    }

    @media (min-width: $media-screen-large) {

      /* Hard-coded? Whaaaaaa? */
      min-height: 640px;
      background-size: 500px auto;
      padding-right: 485px;
    }
  }

  &--right {
    background-position: center 5%;
    background-size: 100% auto;
    padding-top: 100%;

    @media (min-width: 480px) {
      background-size: 480px;
      padding-top: 450px;
    }

    @media (min-width: $media-screen-small) {
      @mixin section-padding;
      background-size: 44%;
      background-position: -10% center;
      padding-left: 40%;
    }

    @media (min-width: $media-screen-large) {
      padding-left: 430px;
      background-position: 0 center;
      background-size: 400px;
    }
  }

  > * {
    @mixin keep-on-top;
  }

  * + * {
    margin-top: calc( $bh * 1 );
  }

  &__heading,h2 {
    @mixin heading;
    @mixin heading-centered;
    margin-top: calc( $bh * 2 );

    &:first-child {
      margin-top: 0;
    }

    &--inverted {
      @mixin heading-color-inverted;
    }
  }

  &__subheading,h3 {
    @mixin subheading;
    margin-top: calc( $bh * 2 );

    &:first-child {
      margin-top: 0;
    }

    &--inverted {
      @mixin heading-color-inverted;
    }
  }

  &__lead {
    @mixin text-big;

    &--inverted {
      @mixin text-color-inverted;
    }
  }

  &__image {
    display: block;
    max-width: 100%;
    height: auto;

    &--float-right {
      float: right;
      max-width: 30%;
      margin-left: $bh;
    }
  }

  &__image-with-caption {

  }

  &__image-caption {
    @mixin text-small;
    margin-top: calc( $bh * 0.25 );
    color: $color-gray-medium;
    font-style: italic;
  }

  &__link {
    font-size: inherit;
  }

  /*
   * To avoid side-effects in BEM-adherent blocks, we make sure to only style
   * paragraphs and list items without classes applied.
   *
   * This is basically a BEM hack for user-generated input. I find this only
   * slightly less fucky than trying to hack WordPress to apply classes to all
   * paragraphs and lists.
   */
  p:not([class]),li:not([class]) {
    @mixin text-body;
  }

  h3 + p {
    margin-top: calc( $bh * 0.5 );
  }

  img:not([class]) {
    max-width: 100%;
    height: auto;
    margin-top: $bh;
  }

  &--inverted {
    background-color: $color-gray-dark;
    border-top: $border-width-default $border-style-default $color-darkest;
    color: $color-gray-light;

    p:not([class]),li:not([class]) {
      @mixin text-color-inverted;
    }
  }
}
